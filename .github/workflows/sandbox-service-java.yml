env:
  ENVIRONMENT: sandbox
  REGION: us-east-1
  NAMESPACE: katu

name: Deploy to Sandbox
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      full-sha:
        description: 'Git commit full SHA (if empty `latest`)'
        required: false
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      APPLICATION: ${{ steps.var-application.outputs.APPLICATION }}
      SHA_SHORT: ${{ steps.var-sha-short.outputs.SHA_SHORT }}
      IMAGE_TAG: ${{ steps.docker-vars.outputs.IMAGE_TAG }}
      DATE: ${{ steps.var-date.outputs.DATE }}
    steps:
      - name: Variable SHA_SHORT
        id: var-sha-short
        run: |
          echo ::set-output name=SHA_SHORT::$(echo ${GITHUB_SHA} | cut -c1-7)
      - name: Variable APPLICATION
        id: var-application
        run: |
          echo ::set-output name=APPLICATION::${{ github.event.repository.name }}
      - name: Variable IMAGE_TAG
        id: docker-vars
        run: |
          echo ::set-output name=IMAGE_TAG::ghcr.io/${{github.repository_owner}}/${{steps.var-application.outputs.APPLICATION}}:${{steps.var-sha-short.outputs.SHA_SHORT}}
      - name: Variable DATE
        id: var-date
        run: |
          echo ::set-output name=DATE::$(TZ='America/Lima' date +'%Y-%m-%d-%H%M')
  build-and-test:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Generate settings.xml
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          repositories: >-
            [{ "id": "github", "url": "https://maven.pkg.github.com/katu-digital/*", "snapshots": { "enabled": "true" } }]
          servers: >-
            [{ "id": "github", "username": "${env.GH_USER}", "password": "${env.GH_TOKEN}" }]
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Compile, Package, Verify
        run: mvn -f jiren-customers-agregation/pom.xml --batch-mode --update-snapshots verify
        env:
          GH_USER: ${{ secrets.GH_USER }}
          GH_TOKEN: ${{ secrets.GH_CREDENTIALS }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            jiren-customers-api/target/*.jar
            Dockerfile
            .k8s/**/*.yaml
          if-no-files-found: error
  generate-image:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build-and-test
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: artifacts
      - name: Docker Login
        uses: docker/login-action@v1.6.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USER }}
          password: ${{ secrets.GH_CREDENTIALS }}
      - name: Setup Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true
      - name: Generate Image and Push to Registry
        uses: docker/build-push-action@v2.2.0
        with:
          tags: ${{ needs.prepare.outputs.IMAGE_TAG }}
          context: .
          push: true
          builder: ${{ steps.buildx.outputs.name }}
  deploy-k8s:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - generate-image
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: artifacts
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets[format('AWS_ID_{0}', env.ENVIRONMENT)] }}
          aws-secret-access-key: ${{ secrets[format('AWS_SECRET_{0}', env.ENVIRONMENT)] }}
          aws-region: ${{env.REGION}}
      - name: Install Kubectl
        uses: azure/setup-kubectl@v1
      - name: Install Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "4.1.2"
      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{env.NAMESPACE}}-${{env.ENVIRONMENT}}-eks-cluster
      - name: Update Manifests
        working-directory: ./.k8s/${{env.ENVIRONMENT}}
        run: |
          kustomize edit add annotation kubernetes.io/change-cause:"Commit: ${{ needs.prepare.outputs.SHA_SHORT }} | Date: ${{needs.prepare.outputs.DATE}}"
          kustomize edit set image ${{ needs.prepare.outputs.IMAGE_TAG }}
          sed -i -e 's/$ENVIRONMENT_NAME/${{env.ENVIRONMENT}}/' ../production/${{needs.prepare.outputs.APPLICATION}}.yaml
      - name: Apply Manifests
        run: |
          kustomize build .k8s/${{env.ENVIRONMENT}}
          kubectl apply -k .k8s/${{env.ENVIRONMENT}} -n ${{env.NAMESPACE}}
  verify-deployment:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - deploy-k8s
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets[format('AWS_ID_{0}', env.ENVIRONMENT)] }}
          aws-secret-access-key: ${{ secrets[format('AWS_SECRET_{0}', env.ENVIRONMENT)] }}
          aws-region: ${{env.REGION}}
      - name: Install Kubectl
        uses: azure/setup-kubectl@v1
      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{env.NAMESPACE}}-${{env.ENVIRONMENT}}-eks-cluster
      - name: Validate Deployment
        run: |
          kubectl rollout status deployment ${{needs.prepare.outputs.APPLICATION}} -n ${{env.NAMESPACE}}
  update-deployment-status:
    runs-on: ubuntu-latest
    needs:
      - prepare
      - verify-deployment
    steps:
      - name: Create GitHub Deployment
        uses: bobheadxi/deployments@v0.6.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{env.ENVIRONMENT}}
      - name: Update Deployment Status (Success)
        uses: bobheadxi/deployments@v0.6.0
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}